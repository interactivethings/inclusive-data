wd
x <-3
x
install.packages("xlsx")
install.packages("xlsx2")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("rJava")
library(rJava)
library(xlsx)
system("java version")
system("java -version")
q()
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
install.packages("xlsx")
install.packages("rJava")
library(rJava)
library(xlsx)
library(rJava)
export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
q()
source('~/Documents/1714-Millennial Survey Visualization/data/R/EmploySurvey.R')
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(extrafont)
library(likert)
setwd("~/Documents/projects/samsung-game-data-visualization/data")
d <- read.csv('dataa.csv', strip.white=TRUE)
d <- read.csv('data.csv', strip.white=TRUE)
library(tidyr)
View(d)
s <- d %>% filter(indicator=="General_Wage Level (gross)_(New York = 100)" | indicator=="General_Price Level_incl. rent (New York = 100)" )
d <- read.csv('data.csv', strip.white=TRUE)
s <- d %>% filter(indicator=="General_Wage Level (gross)_(New York = 100)" | indicator=="General_Price Level_incl. rent (New York = 100)" )
View(d)
?sample
?sample
lonely<-round(rchisq(40,1))
lonely
l_cens<-rep(1,40)
l_cens
l_type<-rep("lonely",40)
l_bind<-cbind(lonely,l_cens,l_type)
View(l_bind)
?rchis
?rchisq
chick<-sample(70:120,10,replace=T)
chick
sample <- sample(0:1, 400)
sample <- sample(0:1, 20)
sample <- sample(0:1, 20, replace=T)
rchisq(40,1)
round(rchisq(40,1))
runif(1)
?runif
sample(1:9, 1000, replace = TRUE)/10
randomDim = round(runif(1)*3)+1
l_type<-rep(round(runif(1)*3)+1)
?rep
l_type<-rep(round(runif(1)*3)+1, 400)
l_type
sample(1:9, 400, replace = TRUE)/10
f <- sample(1:9, 400, replace = TRUE)/10
f <- sample(1:9, 400, replace = TRUE)/10
sample(seq(as.Date('1999/01/01'), as.Date('2000/01/01'), by="day"), 12)
dates <- sample(seq(as.Date('1999/01/01'), as.Date('2000/01/01'), by="day"), 400)
?seq
dates <- sample(seq(as.Date('1999/01/01'), as.Date('2000/01/01'), by="hour"), 400)
?seq
dates <- sample(seq(as.Date('2016/01/01'), as.Date('2018/01/01'), by="hour"), 400)
dates <- sample(seq(as.Date('2016/01/01'), as.Date('2018/01/01'), by="day"), 400)
fake <- cbind(dates, f)
View(fake)
fake <- as.data.frame(cbind(date, temperature))
temperature <- sample(1:9, 400, replace = TRUE)/10
date <- sample(seq(as.Date('2016/01/01'), as.Date('2018/01/01'), by="day"), 400)
fake <- as.data.frame(cbind(date, temperature))
fake
?sample
write.csv(fake, "fake.csv", row.names = F)
?cbind
date <- as.data.frame(sample(seq(as.Date('2016/01/01'), as.Date('2018/01/01'), by="day"), 400))
View(date)
temperature <-  as.data.frame(sample(1:9, 400, replace = TRUE)/10)
date <- as.data.frame(sample(seq(as.Date('2016/01/01'), as.Date('2018/01/01'), by="day"), 400))
fake <-cbind(date, temperature)
View(fake)
?rename
fake <- fake %>% rename(date, temperature)
library(dplyr)
fake <- fake %>% rename(date, temperature)
fake <- fake %>% rename(fake[0] = date)
fake <- fake %>% rename(date = fake[0])
fake <- fake %>% select(fake[0])
fake <- fake %>% select(fake[1])
fake <- fake %>% select(fake)
fake <- fake %>% select(date = names(.)[0])
View(fake)
fake <-cbind(date, temperature)
fake <- fake %>% rename(date = names(.)[0])
n1 <-  names(.)[0]
fake <- fake %>% rename(date =n1)
a = rnorm(10)
rnorm(10)
?rnorm
rnorm(10, mean=0.5)
?runif
runif(20, min = 0, max = 1)
temperature <-  as.data.frame(runif(400, min = 0, max = 1))
View(temperature)
temperature <-  runif(400, min = 0, max = 1)
temperature <-  runif(400, min = 0, max = 1)
date <- sample(seq(as.Date('2016/01/01'), as.Date('2018/01/01'), by="day"), 400)
fake <-cbind(as.data.frame(date), as.data.frame(temperature))
fake
write.csv(fake, "fake.csv", row.names = F)
write_json(fake, "fake.json", pretty=T)
library(jsonlite)
write_json(fake, "fake.json", pretty=T)
temperature <-  runif(400, min = 0, max = 1)
date <- sample(seq(as.Date('2016/01/01'), as.Date('2018/01/01'), by="day"), 400)
fake <-cbind(as.data.frame(date), as.data.frame(temperature))
write.csv(fake, "fake.csv", row.names = F)
write_json(fake, "fake.json", pretty=T)
library(tidyr)
library(dplyr)
library(jsonlite)
# Fake Data
temperature <-  runif(400, min = 0, max = 1)
date <- sample(seq(as.Date('2016/01/01'), as.Date('2018/01/01'), by="day"), 400)
fake <-cbind(as.data.frame(date), as.data.frame(temperature))
write.csv(fake, "fake.csv", row.names = F)
write_json(fake, "fake.json", pretty=T)
?runif
setwd("~/Documents/projects/lab-inclusive-data-visualization")
d <- read.csv("raw/planets.csv")
?read.csv
setwd("~/Documents/projects/lab-inclusive-data-visualization/data")
d <- read.csv("raw/planets.csv")
d
View(d)
d <- read.csv("raw/planets.csv", skip=358)
View(d)
raw <- read.csv("raw/planets.csv", skip=358)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
select)
?select
d<- raw %>% select(pl_name, pl_disc, pl_discmethod)
View(d)
d <- raw %>% select(pl_name, pl_disc, pl_discmethod, st_dist)
View(d)
str(d$st_dist)
str(d)
max(d$st_dist)
?str
summary(d$st_dist)
d <- raw %>% select(pl_name, pl_disc, pl_discmethod, pl_rade, pl_masse, st_dist)
View(d)
??dplyr
?mutate
json <- toJSON(d)
library(jsonlite)
json <- toJSON(d)
json
write(json, "tidy/planets.json")
json <- toJSON(d, pretty=T)
write(json, "tidy/planets.json")
?toJSON
json <- toJSON(d, pretty=T, na=null)
write(json, "tidy/planets.json")
json <- toJSON(d, pretty=T, na="null")
write(json, "tidy/planets.json")
